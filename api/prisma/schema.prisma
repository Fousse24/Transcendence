// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int        @id @default(autoincrement())
  username                 String     @unique
  email                    String     @unique
  displayName              String
  normalizedName           String     @unique
  firstName                String
  lastName                 String
  avatarUrl                String?
  status                   UserStatus @default(OFFLINE)
  twoFASecret              String?
  isTwoFactorAuthEnabled   Boolean    @default(false) @map("twoFAEnable")
  isTwoFactorAuthenticated Boolean    @default(false)

  rooms           UserChatRoom[]
  connections     UserConnection[]
  messages        ChatMessage[]
  friendsRequests Friendship[]     @relation("requester")
  friendsAdressee Friendship[]     @relation("adressee")

  GamesAsPlayer1 Game[] @relation("gameP1")
  GamesAsPlayer2 Game[] @relation("gameP2")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum ChatRoomVisibility {
  PUBLIC
  PRIVATE
}

model ChatRoom {
  id         String             @id @default(uuid())
  name       String
  visibility ChatRoomVisibility @default(PUBLIC)

  users    UserChatRoom[]
  messages ChatMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chatrooms")
}

model UserChatRoom {
  user   User     @relation(fields: [userId], references: [id])
  userId Int
  room   ChatRoom @relation(fields: [roomId], references: [id])
  roomId String

  isOwner Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, roomId])
  @@map("user_chatrooms")
}

model UserConnection {
  id       Int        @id @default(autoincrement())
  socketId String     @unique
  type     SocketType

  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_connections")
}

enum SocketType {
  GAME
  CHAT
}

enum UserStatus {
  OFFLINE
  ONLINE
  IN_GAME
  SPECTATING
}

model ChatMessage {
  id       Int      @id @default(autoincrement())
  content  String
  author   User     @relation(fields: [authorId], references: [id])
  authorId Int
  room     ChatRoom @relation(fields: [roomId], references: [id])
  roomId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chat_messages")
}

enum Winner {
  PLAYER1
  PLAYER2
  NONE
}

model Game {
  id         Int       @id @default(autoincrement())
  startTime  DateTime  @default(now())
  endTime    DateTime?
  timePlayed Float     @default(0)
  player1    User      @relation(name: "gameP1", fields: [player1Id], references: [id])
  player1Id  Int
  player2    User      @relation(name: "gameP2", fields: [player2Id], references: [id])
  player2Id  Int

  winner       Winner @default(NONE)
  scorePlayer1 Int    @default(0)
  scorePlayer2 Int    @default(0)
  ballBounce   Int    @default(0)
  longestRally Int    @default(0)
  description  String @default("")

  CreatedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friendship {
  requester        User    @relation("requester", fields: [requesterId], references: [id])
  requesterId      Int
  adressee         User    @relation("adressee", fields: [adresseeId], references: [id])
  adresseeId       Int
  accepted         Boolean @default(false)
  adresseeBlocker  Boolean @default(false)
  requesterBlocker Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([requesterId, adresseeId])
  @@map("friendships")
}
